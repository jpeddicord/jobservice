===============================
 Service-Level Settings Format
===============================
:Author: Jacob Peddicord <jpeddicord@ubuntu.com>
:Description: SLS format 0.8 introduction and specification

.. contents::

Introduction
============

Are you the maintainer (or interested developer) of a system service? Do you want to make certain aspects of your service easily configurable by system administrators and users, without the need to edit config files? You've come to the right place.

This document describes the format of an SLS definition with examples and further instructions. After reading this, you should be able to write your own in no time. If you can't, then I've failed as a documentation writer and you should email me directly for help.

XML Format
==========

I'm going to assume you have at least basic knowledge of XML. If you don't know what XML is, just think of HTML, but more mundane. A basic SLS XML file looks something like this::

    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE settings PUBLIC
     "-//Ubuntu//DTD JobService Service-Level Settings 0.8//EN"
     "http://people.ubuntu.com/~jpeddicord/SLS/0.8/sls.dtd">
    <settings>
        <setting name="setting_name" type="setting_type">
            <description>Some descriptive name</description>
            <data>
                <parse file="some_filename">%n=%s</parse>
            </data>
            <values>
                <value name="true">
                    <raw>1</raw>
                    <description>A description for this value</description>
                </value>
                <value name="false">
                    <raw>0</raw>
                </value>
                ...
            </values>
        </setting>
        
        ...
    </settings>

Let's break this down a little. The first four lines are standard XML practice: the XML and DOCTYPE tags. Always keep these present in your file. Nothing bad should happen with jobservice if they're not there, but the standards police may arrive on your doorstep and take you away.

Next up is the <settings> element. This **must** be present or nothing's going to read your file.

Inside the <settings> tag is a <setting> (singular) tag. Any number of <setting> tags can be present inside <settings>. A setting tag has two required attributes: ``name`` and ``type``. ``name`` must be a unique name for this setting within the file. ``type`` tells jobservice what it should be expecting. We'll talk more about types shortly.

Inside an individual <setting> tag are three elements: <description>, <data>, and <values>. Only <description> is actually required, meaning this is valid::

    <setting name="group_warning" type="label">
        <description>The following settings may break things.</description>
    </setting>

That's usually not very useful, though, as it doesn't really do anything. (It's really only for the ``label`` type, which I'll describe later.)

<data> tells jobservice where it can find and save the actual settings it changes. This will be covered in the Data section below.

<values> describes possible values a particular setting can take. Covered in the Values section.

Data
----

Single File
~~~~~~~~~~~

The data section tells jobservice where to look for the setting value and where to store it when it changes. 90% of the time, it will look something like this::

    <data>
        <parse file="/etc/config/file">SOME_OPTION = %s</parse>
    </data>

This tells the parser to look in ``/etc/config/file`` for a line that has ``SOME_OPTION = ``, followed by the actual value it will pick up. So, if that file has ``SOME_OPTION = sega`` in it, then the value returned by jobservice will be ``sega``. When the user changes this value, it is written back to the file in the same place.

Multiple Locations
~~~~~~~~~~~~~~~~~~

Multiple <parse> tags are accepted. In ``apache2``, for example, changing the server port requires it to be configured in multiple locations. Such a setup could be written as the following (simplified, this isn't actually correct for apache)::

    <data>
        <parse file="/etc/apache2/ports.conf">Listen %s</parse>
        <parse file="/etc/apache2/sites-available/000-default.conf">VirtualHost *:%s</parse>
    </data>

With the above, when a value is changed, it is written to both of those files. (Note that jobservice only *reads* the value from the first, however.)

External Helpers
~~~~~~~~~~~~~~~~

There are *very rare* cases where simply writing to a file is not enough. For that, there is the ability to call on external programs or helper scripts to fetch and set the value::

    <data>
        <parse get="/usr/lib/jobservice/my-helper">SomeSetting %s</parse>
        <parse set="/usr/lib/jobservice/my-helper">SomeSetting=%s</parse>
    </data>

This calls ``my-helper`` and parses STDOUT for ``SomeSetting %s`` as is done for normal files.
When saving, ``my-helper`` is called with STDIN set to ``SomeSetting=%s`` (with %s replaced with the value, of course), again much like how things are written with normal files. The scripts given in get/set **must have absolute paths** or jobservice may not be able to find them.
Other than that, there are no real limitations: you can use extra arguments to scripts, get and set can be different programs, and you can even mix this with regular files as in the above examples. These are all rather advanced, however, and using regular files should cover most use cases.

The "%n" shortcut
~~~~~~~~~~~~~~~~~

One very handy shortcut you can use inside <parse> tags is ``%n``, which is replaced with the name of the setting before parsing. So::

    <setting name="MySetting" type="str">
        <data>
            <parse file="/some/file">MySetting = "%s"</parse>
        ...

is identical to::

    <setting name="MySetting" type="str">
        <data>
            <parse file="/some/file">%n = "%s"</parse>
        ...

This can make your setting files more concise and reduce the work needed to write them (even if just by a small amount).

Static values
~~~~~~~~~~~~~

Lastly, a data tag can also have a fixed value. This is really only useful for the ``exec`` type, but you may find other uses for it::

    <data val="gufw" />

In this case the tag is self-closing. As previously mentioned, if you're using a ``label`` type, you can omit the <data> tag entirely.

Values
------

Constraints
~~~~~~~~~~~

Type Reference
--------------

This is the main portion of this document. Different types have different requirements. If you're looking for a specific type, just locate the relevant section and read the details for information on how to use it.

.. contents:: :local:

bool
~~~~

int/float
~~~~~~~~~

str
~~~

label
~~~~~

choice
~~~~~~

file/dir
~~~~~~~~

user/group
~~~~~~~~~~

exec
~~~~

non-abs paths

Translation
===========

Distribution
============

With your service
-----------------

With jobservice
---------------
