#!/usr/bin/env python

import sys

def p(t):
    print >> sys.stderr, t
    return t

iface = sys.argv[1].split('/')[1]
mode = sys.argv[2]

def main():
    interfaces = Interfaces()

    if mode == 'get':
        # manual mode
        if iface in interfaces.auto:
            print "manual yes"
        else:
            print "manual no"
            return
        # network mode
        if iface in interfaces.family and iface in interfaces.method:
            fam = interfaces.family[iface]
            meth = interfaces.method[iface]
            if (fam == 'inet' and (meth == 'static' or meth == 'dhcp')) or \
                    (fam == 'inet6' and meth == 'static'):
                print "netmode {0} {1}".format(fam, meth)
        # address
        if iface in interfaces.address:
            print "address {0}".format(interfaces.address[iface])
        # netmask
        if iface in interfaces.netmask:
            print "netmask {0}".format(interfaces.netmask[iface])
        # gateway
        if iface in interfaces.gateway:
            print "gateway {0}".format(interfaces.gateway[iface])
    elif mode == 'set':
        p(sys.stdin.readlines())

class Interfaces:
    def __init__(self):
        self.auto = []
        self.iface_stanza = {}
        self.family = {}
        self.method = {}
        self.address = {}
        self.netmask = {}
        self.gateway = {}
        # parse it!
        f = open('/etc/network/interfaces')
        current_iface = None
        for line in f:
            data = line.strip().split()
            if not data:
                continue
            # check the type of line
            if data[0] == 'auto':
                current_iface = None
                self.auto.extend(data[1:])
            elif data[0].find('allow-') == 0 or data[0].find('mapping') == 0:
                current_iface = None
            elif data[0] == 'iface':
                current_iface = data[1]
                self.iface_stanza[current_iface] = []
                self.family[data[1]] = data[2]
                self.method[data[1]] = data[3]
            elif data[0] == 'address':
                self.address[current_iface] = data[1]
            elif data[0] == 'netmask':
                self.netmask[current_iface] = data[1]
            elif data[0] == 'gateway':
                self.gateway[current_iface] = data[1]
            
            # store stanzas
            if current_iface:
                self.iface_stanza[current_iface].append(line)
            
        f.close()
        
        p(self.iface_stanza)
    
    def update_mode(self, iface, mode):
        pass
    
    def update_option(self, iface, setting, value):
        """Update an option inside a stanza."""
        orig = open('/etc/network/interfaces')
        f = open('/etc/network/interfaces.new', 'w')
        found = False
        finished = False
        for line in orig:
            if line.strip().find('iface ' + iface) == 0:
                found = True
            f.write(line)

if __name__ == '__main__':
    sys.exit(main())
