#!/usr/bin/python

import sys
from gobject import threads_init, MainLoop
from dbus import SystemBus
from dbus.service import BusName, Object as DBusObject, method as DBusMethod
from dbus.mainloop.glib import DBusGMainLoop
from JobService import DBUS_IFACE, DBUS_PATH
from JobService.backends import ServiceProxy
from JobService.job import SingleJobService
from JobService.util import dbus_safe_name


class RootJobService(DBusObject):

    def __init__(self, conn=None, object_path=None, bus_name=None):
        """
        Fire up this service as well as all of the paths for individual jobs.
        """
        DBusObject.__init__(self, conn, object_path, bus_name)
        
        self.proxy = ServiceProxy()
        
        # create an object for each available job
        for job, running in self.proxy.get_all_services():
            SingleJobService(conn, '%s/%s' % (DBUS_PATH, dbus_safe_name(job)))
        
    
    @DBusMethod(DBUS_IFACE, in_signature='', out_signature='a(sb)',
                sender_keyword='sender', connection_keyword='conn')
    def GetAllJobs(self, sender=None, conn=None):
        """
        Returns all jobs known by the backend(s), along with their states.
        
        Returns struct (
            string name
            boolean running
        )
        """
        
        return self.proxy.get_all_services()
    

if __name__ == '__main__':
    DBusGMainLoop(set_as_default=True)
    threads_init()

    srv = RootJobService(
        BusName('com.ubuntu.JobService', bus=SystemBus()),
        DBUS_PATH
    )
    srv.loop = MainLoop()
    srv.loop.run()
